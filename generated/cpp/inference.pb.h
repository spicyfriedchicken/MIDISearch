// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: inference.proto
// Protobuf C++ Version: 5.29.3

#ifndef inference_2eproto_2epb_2eh
#define inference_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_inference_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_inference_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_inference_2eproto;
namespace inference {
class InferenceRequest;
struct InferenceRequestDefaultTypeInternal;
extern InferenceRequestDefaultTypeInternal _InferenceRequest_default_instance_;
class InferenceRequest_MetadataEntry_DoNotUse;
struct InferenceRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern InferenceRequest_MetadataEntry_DoNotUseDefaultTypeInternal _InferenceRequest_MetadataEntry_DoNotUse_default_instance_;
class InferenceResponse;
struct InferenceResponseDefaultTypeInternal;
extern InferenceResponseDefaultTypeInternal _InferenceResponse_default_instance_;
class InferenceResponse_OutputMetaEntry_DoNotUse;
struct InferenceResponse_OutputMetaEntry_DoNotUseDefaultTypeInternal;
extern InferenceResponse_OutputMetaEntry_DoNotUseDefaultTypeInternal _InferenceResponse_OutputMetaEntry_DoNotUse_default_instance_;
}  // namespace inference
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace inference {
enum StatusCode : int {
  STATUS_OK = 0,
  STATUS_ERROR = 1,
  STATUS_INVALID_INPUT = 2,
  STATUS_MODEL_NOT_FOUND = 3,
  STATUS_TIMEOUT = 4,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StatusCode_IsValid(int value);
extern const uint32_t StatusCode_internal_data_[];
constexpr StatusCode StatusCode_MIN = static_cast<StatusCode>(0);
constexpr StatusCode StatusCode_MAX = static_cast<StatusCode>(4);
constexpr int StatusCode_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
StatusCode_descriptor();
template <typename T>
const std::string& StatusCode_Name(T value) {
  static_assert(std::is_same<T, StatusCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StatusCode_Name().");
  return StatusCode_Name(static_cast<StatusCode>(value));
}
template <>
inline const std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StatusCode_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool StatusCode_Parse(absl::string_view name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
      StatusCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class InferenceResponse_OutputMetaEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  InferenceResponse_OutputMetaEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InferenceResponse_OutputMetaEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit InferenceResponse_OutputMetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const InferenceResponse_OutputMetaEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const InferenceResponse_OutputMetaEntry_DoNotUse*>(
        &_InferenceResponse_OutputMetaEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_inference_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class InferenceRequest_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  InferenceRequest_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InferenceRequest_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit InferenceRequest_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const InferenceRequest_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const InferenceRequest_MetadataEntry_DoNotUse*>(
        &_InferenceRequest_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_inference_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class InferenceResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:inference.InferenceResponse) */ {
 public:
  inline InferenceResponse() : InferenceResponse(nullptr) {}
  ~InferenceResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InferenceResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InferenceResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InferenceResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline InferenceResponse(const InferenceResponse& from) : InferenceResponse(nullptr, from) {}
  inline InferenceResponse(InferenceResponse&& from) noexcept
      : InferenceResponse(nullptr, std::move(from)) {}
  inline InferenceResponse& operator=(const InferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferenceResponse& operator=(InferenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferenceResponse* internal_default_instance() {
    return reinterpret_cast<const InferenceResponse*>(
        &_InferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(InferenceResponse& a, InferenceResponse& b) { a.Swap(&b); }
  inline void Swap(InferenceResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferenceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferenceResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InferenceResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InferenceResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InferenceResponse& from) { InferenceResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InferenceResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "inference.InferenceResponse"; }

 protected:
  explicit InferenceResponse(::google::protobuf::Arena* arena);
  InferenceResponse(::google::protobuf::Arena* arena, const InferenceResponse& from);
  InferenceResponse(::google::protobuf::Arena* arena, InferenceResponse&& from) noexcept
      : InferenceResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOutputMetaFieldNumber = 3,
    kJobIdFieldNumber = 1,
    kOutputDataFieldNumber = 2,
    kErrorMessageFieldNumber = 5,
    kResponseTimestampFieldNumber = 6,
    kStatusCodeFieldNumber = 4,
  };
  // map<string, string> output_meta = 3;
  int output_meta_size() const;
  private:
  int _internal_output_meta_size() const;

  public:
  void clear_output_meta() ;
  const ::google::protobuf::Map<std::string, std::string>& output_meta() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_output_meta();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_output_meta() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_output_meta();

  public:
  // string job_id = 1;
  void clear_job_id() ;
  const std::string& job_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_job_id(Arg_&& arg, Args_... args);
  std::string* mutable_job_id();
  PROTOBUF_NODISCARD std::string* release_job_id();
  void set_allocated_job_id(std::string* value);

  private:
  const std::string& _internal_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_id(
      const std::string& value);
  std::string* _internal_mutable_job_id();

  public:
  // bytes output_data = 2;
  void clear_output_data() ;
  const std::string& output_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_output_data(Arg_&& arg, Args_... args);
  std::string* mutable_output_data();
  PROTOBUF_NODISCARD std::string* release_output_data();
  void set_allocated_output_data(std::string* value);

  private:
  const std::string& _internal_output_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_data(
      const std::string& value);
  std::string* _internal_mutable_output_data();

  public:
  // string error_message = 5;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // int64 response_timestamp = 6;
  void clear_response_timestamp() ;
  ::int64_t response_timestamp() const;
  void set_response_timestamp(::int64_t value);

  private:
  ::int64_t _internal_response_timestamp() const;
  void _internal_set_response_timestamp(::int64_t value);

  public:
  // .inference.StatusCode status_code = 4;
  void clear_status_code() ;
  ::inference::StatusCode status_code() const;
  void set_status_code(::inference::StatusCode value);

  private:
  ::inference::StatusCode _internal_status_code() const;
  void _internal_set_status_code(::inference::StatusCode value);

  public:
  // @@protoc_insertion_point(class_scope:inference.InferenceResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      66, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InferenceResponse& from_msg);
    ::google::protobuf::internal::MapField<InferenceResponse_OutputMetaEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        output_meta_;
    ::google::protobuf::internal::ArenaStringPtr job_id_;
    ::google::protobuf::internal::ArenaStringPtr output_data_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::int64_t response_timestamp_;
    int status_code_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inference_2eproto;
};
// -------------------------------------------------------------------

class InferenceRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:inference.InferenceRequest) */ {
 public:
  inline InferenceRequest() : InferenceRequest(nullptr) {}
  ~InferenceRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InferenceRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InferenceRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InferenceRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline InferenceRequest(const InferenceRequest& from) : InferenceRequest(nullptr, from) {}
  inline InferenceRequest(InferenceRequest&& from) noexcept
      : InferenceRequest(nullptr, std::move(from)) {}
  inline InferenceRequest& operator=(const InferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferenceRequest& operator=(InferenceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferenceRequest* internal_default_instance() {
    return reinterpret_cast<const InferenceRequest*>(
        &_InferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(InferenceRequest& a, InferenceRequest& b) { a.Swap(&b); }
  inline void Swap(InferenceRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferenceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferenceRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InferenceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InferenceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InferenceRequest& from) { InferenceRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InferenceRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "inference.InferenceRequest"; }

 protected:
  explicit InferenceRequest(::google::protobuf::Arena* arena);
  InferenceRequest(::google::protobuf::Arena* arena, const InferenceRequest& from);
  InferenceRequest(::google::protobuf::Arena* arena, InferenceRequest&& from) noexcept
      : InferenceRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 4,
    kJobIdFieldNumber = 1,
    kModelNameFieldNumber = 2,
    kInputDataFieldNumber = 3,
    kContentTypeFieldNumber = 5,
    kRequestTimestampFieldNumber = 6,
  };
  // map<string, string> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string job_id = 1;
  void clear_job_id() ;
  const std::string& job_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_job_id(Arg_&& arg, Args_... args);
  std::string* mutable_job_id();
  PROTOBUF_NODISCARD std::string* release_job_id();
  void set_allocated_job_id(std::string* value);

  private:
  const std::string& _internal_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_id(
      const std::string& value);
  std::string* _internal_mutable_job_id();

  public:
  // string model_name = 2;
  void clear_model_name() ;
  const std::string& model_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_name(Arg_&& arg, Args_... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* value);

  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(
      const std::string& value);
  std::string* _internal_mutable_model_name();

  public:
  // bytes input_data = 3;
  void clear_input_data() ;
  const std::string& input_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input_data(Arg_&& arg, Args_... args);
  std::string* mutable_input_data();
  PROTOBUF_NODISCARD std::string* release_input_data();
  void set_allocated_input_data(std::string* value);

  private:
  const std::string& _internal_input_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_data(
      const std::string& value);
  std::string* _internal_mutable_input_data();

  public:
  // string content_type = 5;
  void clear_content_type() ;
  const std::string& content_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* value);

  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(
      const std::string& value);
  std::string* _internal_mutable_content_type();

  public:
  // int64 request_timestamp = 6;
  void clear_request_timestamp() ;
  ::int64_t request_timestamp() const;
  void set_request_timestamp(::int64_t value);

  private:
  ::int64_t _internal_request_timestamp() const;
  void _internal_set_request_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:inference.InferenceRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      71, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InferenceRequest& from_msg);
    ::google::protobuf::internal::MapField<InferenceRequest_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr job_id_;
    ::google::protobuf::internal::ArenaStringPtr model_name_;
    ::google::protobuf::internal::ArenaStringPtr input_data_;
    ::google::protobuf::internal::ArenaStringPtr content_type_;
    ::int64_t request_timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inference_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InferenceRequest

// string job_id = 1;
inline void InferenceRequest::clear_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.ClearToEmpty();
}
inline const std::string& InferenceRequest::job_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:inference.InferenceRequest.job_id)
  return _internal_job_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InferenceRequest::set_job_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:inference.InferenceRequest.job_id)
}
inline std::string* InferenceRequest::mutable_job_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_job_id();
  // @@protoc_insertion_point(field_mutable:inference.InferenceRequest.job_id)
  return _s;
}
inline const std::string& InferenceRequest::_internal_job_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.job_id_.Get();
}
inline void InferenceRequest::_internal_set_job_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(value, GetArena());
}
inline std::string* InferenceRequest::_internal_mutable_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.job_id_.Mutable( GetArena());
}
inline std::string* InferenceRequest::release_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:inference.InferenceRequest.job_id)
  return _impl_.job_id_.Release();
}
inline void InferenceRequest::set_allocated_job_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.job_id_.IsDefault()) {
    _impl_.job_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceRequest.job_id)
}

// string model_name = 2;
inline void InferenceRequest::clear_model_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_name_.ClearToEmpty();
}
inline const std::string& InferenceRequest::model_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:inference.InferenceRequest.model_name)
  return _internal_model_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InferenceRequest::set_model_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:inference.InferenceRequest.model_name)
}
inline std::string* InferenceRequest::mutable_model_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:inference.InferenceRequest.model_name)
  return _s;
}
inline const std::string& InferenceRequest::_internal_model_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.model_name_.Get();
}
inline void InferenceRequest::_internal_set_model_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_name_.Set(value, GetArena());
}
inline std::string* InferenceRequest::_internal_mutable_model_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.model_name_.Mutable( GetArena());
}
inline std::string* InferenceRequest::release_model_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:inference.InferenceRequest.model_name)
  return _impl_.model_name_.Release();
}
inline void InferenceRequest::set_allocated_model_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceRequest.model_name)
}

// bytes input_data = 3;
inline void InferenceRequest::clear_input_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_data_.ClearToEmpty();
}
inline const std::string& InferenceRequest::input_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:inference.InferenceRequest.input_data)
  return _internal_input_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InferenceRequest::set_input_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:inference.InferenceRequest.input_data)
}
inline std::string* InferenceRequest::mutable_input_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_input_data();
  // @@protoc_insertion_point(field_mutable:inference.InferenceRequest.input_data)
  return _s;
}
inline const std::string& InferenceRequest::_internal_input_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.input_data_.Get();
}
inline void InferenceRequest::_internal_set_input_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_data_.Set(value, GetArena());
}
inline std::string* InferenceRequest::_internal_mutable_input_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.input_data_.Mutable( GetArena());
}
inline std::string* InferenceRequest::release_input_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:inference.InferenceRequest.input_data)
  return _impl_.input_data_.Release();
}
inline void InferenceRequest::set_allocated_input_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.input_data_.IsDefault()) {
    _impl_.input_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceRequest.input_data)
}

// map<string, string> metadata = 4;
inline int InferenceRequest::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int InferenceRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void InferenceRequest::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& InferenceRequest::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& InferenceRequest::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:inference.InferenceRequest.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* InferenceRequest::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* InferenceRequest::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:inference.InferenceRequest.metadata)
  return _internal_mutable_metadata();
}

// string content_type = 5;
inline void InferenceRequest::clear_content_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& InferenceRequest::content_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:inference.InferenceRequest.content_type)
  return _internal_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InferenceRequest::set_content_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:inference.InferenceRequest.content_type)
}
inline std::string* InferenceRequest::mutable_content_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:inference.InferenceRequest.content_type)
  return _s;
}
inline const std::string& InferenceRequest::_internal_content_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_type_.Get();
}
inline void InferenceRequest::_internal_set_content_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_type_.Set(value, GetArena());
}
inline std::string* InferenceRequest::_internal_mutable_content_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_type_.Mutable( GetArena());
}
inline std::string* InferenceRequest::release_content_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:inference.InferenceRequest.content_type)
  return _impl_.content_type_.Release();
}
inline void InferenceRequest::set_allocated_content_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_type_.IsDefault()) {
    _impl_.content_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceRequest.content_type)
}

// int64 request_timestamp = 6;
inline void InferenceRequest::clear_request_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_timestamp_ = ::int64_t{0};
}
inline ::int64_t InferenceRequest::request_timestamp() const {
  // @@protoc_insertion_point(field_get:inference.InferenceRequest.request_timestamp)
  return _internal_request_timestamp();
}
inline void InferenceRequest::set_request_timestamp(::int64_t value) {
  _internal_set_request_timestamp(value);
  // @@protoc_insertion_point(field_set:inference.InferenceRequest.request_timestamp)
}
inline ::int64_t InferenceRequest::_internal_request_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_timestamp_;
}
inline void InferenceRequest::_internal_set_request_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_timestamp_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InferenceResponse

// string job_id = 1;
inline void InferenceResponse::clear_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.ClearToEmpty();
}
inline const std::string& InferenceResponse::job_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:inference.InferenceResponse.job_id)
  return _internal_job_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InferenceResponse::set_job_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:inference.InferenceResponse.job_id)
}
inline std::string* InferenceResponse::mutable_job_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_job_id();
  // @@protoc_insertion_point(field_mutable:inference.InferenceResponse.job_id)
  return _s;
}
inline const std::string& InferenceResponse::_internal_job_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.job_id_.Get();
}
inline void InferenceResponse::_internal_set_job_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(value, GetArena());
}
inline std::string* InferenceResponse::_internal_mutable_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.job_id_.Mutable( GetArena());
}
inline std::string* InferenceResponse::release_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:inference.InferenceResponse.job_id)
  return _impl_.job_id_.Release();
}
inline void InferenceResponse::set_allocated_job_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.job_id_.IsDefault()) {
    _impl_.job_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceResponse.job_id)
}

// bytes output_data = 2;
inline void InferenceResponse::clear_output_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_data_.ClearToEmpty();
}
inline const std::string& InferenceResponse::output_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:inference.InferenceResponse.output_data)
  return _internal_output_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InferenceResponse::set_output_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:inference.InferenceResponse.output_data)
}
inline std::string* InferenceResponse::mutable_output_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_output_data();
  // @@protoc_insertion_point(field_mutable:inference.InferenceResponse.output_data)
  return _s;
}
inline const std::string& InferenceResponse::_internal_output_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.output_data_.Get();
}
inline void InferenceResponse::_internal_set_output_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_data_.Set(value, GetArena());
}
inline std::string* InferenceResponse::_internal_mutable_output_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.output_data_.Mutable( GetArena());
}
inline std::string* InferenceResponse::release_output_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:inference.InferenceResponse.output_data)
  return _impl_.output_data_.Release();
}
inline void InferenceResponse::set_allocated_output_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.output_data_.IsDefault()) {
    _impl_.output_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceResponse.output_data)
}

// map<string, string> output_meta = 3;
inline int InferenceResponse::_internal_output_meta_size() const {
  return _internal_output_meta().size();
}
inline int InferenceResponse::output_meta_size() const {
  return _internal_output_meta_size();
}
inline void InferenceResponse::clear_output_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_meta_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& InferenceResponse::_internal_output_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.output_meta_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& InferenceResponse::output_meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:inference.InferenceResponse.output_meta)
  return _internal_output_meta();
}
inline ::google::protobuf::Map<std::string, std::string>* InferenceResponse::_internal_mutable_output_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.output_meta_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* InferenceResponse::mutable_output_meta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:inference.InferenceResponse.output_meta)
  return _internal_mutable_output_meta();
}

// .inference.StatusCode status_code = 4;
inline void InferenceResponse::clear_status_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_code_ = 0;
}
inline ::inference::StatusCode InferenceResponse::status_code() const {
  // @@protoc_insertion_point(field_get:inference.InferenceResponse.status_code)
  return _internal_status_code();
}
inline void InferenceResponse::set_status_code(::inference::StatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:inference.InferenceResponse.status_code)
}
inline ::inference::StatusCode InferenceResponse::_internal_status_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::inference::StatusCode>(_impl_.status_code_);
}
inline void InferenceResponse::_internal_set_status_code(::inference::StatusCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_code_ = value;
}

// string error_message = 5;
inline void InferenceResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& InferenceResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:inference.InferenceResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InferenceResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:inference.InferenceResponse.error_message)
}
inline std::string* InferenceResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:inference.InferenceResponse.error_message)
  return _s;
}
inline const std::string& InferenceResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void InferenceResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* InferenceResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* InferenceResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:inference.InferenceResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void InferenceResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceResponse.error_message)
}

// int64 response_timestamp = 6;
inline void InferenceResponse::clear_response_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_timestamp_ = ::int64_t{0};
}
inline ::int64_t InferenceResponse::response_timestamp() const {
  // @@protoc_insertion_point(field_get:inference.InferenceResponse.response_timestamp)
  return _internal_response_timestamp();
}
inline void InferenceResponse::set_response_timestamp(::int64_t value) {
  _internal_set_response_timestamp(value);
  // @@protoc_insertion_point(field_set:inference.InferenceResponse.response_timestamp)
}
inline ::int64_t InferenceResponse::_internal_response_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_timestamp_;
}
inline void InferenceResponse::_internal_set_response_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_timestamp_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace inference


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::inference::StatusCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::inference::StatusCode>() {
  return ::inference::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // inference_2eproto_2epb_2eh
